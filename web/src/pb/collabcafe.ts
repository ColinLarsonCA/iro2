// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: collabcafe.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "collabcafe";

export interface Collab {
  id: string;
  type: string;
  slug: string;
  postedDate: string;
  summary: CollabSummary | undefined;
  content: CollabContent | undefined;
  images: CollabImages | undefined;
}

export interface CollabSummary {
  thumbnail: string;
  title: string;
  description: string;
}

export interface CollabContent {
  series: string;
  title: string;
  categories: string[];
  tags: string[];
  officialWebsite: CollabOfficialWebsite | undefined;
  schedule: CollabSchedule | undefined;
}

export interface CollabOfficialWebsite {
  url: string;
  text: string;
}

export interface CollabSchedule {
  events: CollabEvent[];
}

export interface CollabImages {
  header: string;
}

export interface CollabEvent {
  location: string;
  period: string;
  startDate: string;
  endDate: string;
  mapLink: string;
}

export interface GetCollabRequest {
  id: string;
  language: string;
}

export interface GetCollabResponse {
  collab: Collab | undefined;
}

export interface ListCollabsRequest {
  language: string;
}

export interface ListCollabsResponse {
  collabs: Collab[];
}

export interface SearchCollabsRequest {
  query: string;
  language: string;
}

export interface SearchCollabsResponse {
  collabs: Collab[];
}

export interface ScanSourcesRequest {
}

export interface ScanSourcesResponse {
  numNewCollabs: number;
}

function createBaseCollab(): Collab {
  return { id: "", type: "", slug: "", postedDate: "", summary: undefined, content: undefined, images: undefined };
}

export const Collab: MessageFns<Collab> = {
  encode(message: Collab, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.slug !== "") {
      writer.uint32(26).string(message.slug);
    }
    if (message.postedDate !== "") {
      writer.uint32(34).string(message.postedDate);
    }
    if (message.summary !== undefined) {
      CollabSummary.encode(message.summary, writer.uint32(42).fork()).join();
    }
    if (message.content !== undefined) {
      CollabContent.encode(message.content, writer.uint32(50).fork()).join();
    }
    if (message.images !== undefined) {
      CollabImages.encode(message.images, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Collab {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollab();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.postedDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.summary = CollabSummary.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.content = CollabContent.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.images = CollabImages.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Collab {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      postedDate: isSet(object.postedDate) ? globalThis.String(object.postedDate) : "",
      summary: isSet(object.summary) ? CollabSummary.fromJSON(object.summary) : undefined,
      content: isSet(object.content) ? CollabContent.fromJSON(object.content) : undefined,
      images: isSet(object.images) ? CollabImages.fromJSON(object.images) : undefined,
    };
  },

  toJSON(message: Collab): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.postedDate !== "") {
      obj.postedDate = message.postedDate;
    }
    if (message.summary !== undefined) {
      obj.summary = CollabSummary.toJSON(message.summary);
    }
    if (message.content !== undefined) {
      obj.content = CollabContent.toJSON(message.content);
    }
    if (message.images !== undefined) {
      obj.images = CollabImages.toJSON(message.images);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Collab>, I>>(base?: I): Collab {
    return Collab.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Collab>, I>>(object: I): Collab {
    const message = createBaseCollab();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.slug = object.slug ?? "";
    message.postedDate = object.postedDate ?? "";
    message.summary = (object.summary !== undefined && object.summary !== null)
      ? CollabSummary.fromPartial(object.summary)
      : undefined;
    message.content = (object.content !== undefined && object.content !== null)
      ? CollabContent.fromPartial(object.content)
      : undefined;
    message.images = (object.images !== undefined && object.images !== null)
      ? CollabImages.fromPartial(object.images)
      : undefined;
    return message;
  },
};

function createBaseCollabSummary(): CollabSummary {
  return { thumbnail: "", title: "", description: "" };
}

export const CollabSummary: MessageFns<CollabSummary> = {
  encode(message: CollabSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.thumbnail !== "") {
      writer.uint32(10).string(message.thumbnail);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollabSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollabSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.thumbnail = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollabSummary {
    return {
      thumbnail: isSet(object.thumbnail) ? globalThis.String(object.thumbnail) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CollabSummary): unknown {
    const obj: any = {};
    if (message.thumbnail !== "") {
      obj.thumbnail = message.thumbnail;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollabSummary>, I>>(base?: I): CollabSummary {
    return CollabSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollabSummary>, I>>(object: I): CollabSummary {
    const message = createBaseCollabSummary();
    message.thumbnail = object.thumbnail ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCollabContent(): CollabContent {
  return { series: "", title: "", categories: [], tags: [], officialWebsite: undefined, schedule: undefined };
}

export const CollabContent: MessageFns<CollabContent> = {
  encode(message: CollabContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.series !== "") {
      writer.uint32(10).string(message.series);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    for (const v of message.categories) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    if (message.officialWebsite !== undefined) {
      CollabOfficialWebsite.encode(message.officialWebsite, writer.uint32(42).fork()).join();
    }
    if (message.schedule !== undefined) {
      CollabSchedule.encode(message.schedule, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollabContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollabContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.series = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.categories.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.officialWebsite = CollabOfficialWebsite.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.schedule = CollabSchedule.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollabContent {
    return {
      series: isSet(object.series) ? globalThis.String(object.series) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => globalThis.String(e))
        : [],
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      officialWebsite: isSet(object.officialWebsite)
        ? CollabOfficialWebsite.fromJSON(object.officialWebsite)
        : undefined,
      schedule: isSet(object.schedule) ? CollabSchedule.fromJSON(object.schedule) : undefined,
    };
  },

  toJSON(message: CollabContent): unknown {
    const obj: any = {};
    if (message.series !== "") {
      obj.series = message.series;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.categories?.length) {
      obj.categories = message.categories;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.officialWebsite !== undefined) {
      obj.officialWebsite = CollabOfficialWebsite.toJSON(message.officialWebsite);
    }
    if (message.schedule !== undefined) {
      obj.schedule = CollabSchedule.toJSON(message.schedule);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollabContent>, I>>(base?: I): CollabContent {
    return CollabContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollabContent>, I>>(object: I): CollabContent {
    const message = createBaseCollabContent();
    message.series = object.series ?? "";
    message.title = object.title ?? "";
    message.categories = object.categories?.map((e) => e) || [];
    message.tags = object.tags?.map((e) => e) || [];
    message.officialWebsite = (object.officialWebsite !== undefined && object.officialWebsite !== null)
      ? CollabOfficialWebsite.fromPartial(object.officialWebsite)
      : undefined;
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? CollabSchedule.fromPartial(object.schedule)
      : undefined;
    return message;
  },
};

function createBaseCollabOfficialWebsite(): CollabOfficialWebsite {
  return { url: "", text: "" };
}

export const CollabOfficialWebsite: MessageFns<CollabOfficialWebsite> = {
  encode(message: CollabOfficialWebsite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollabOfficialWebsite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollabOfficialWebsite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollabOfficialWebsite {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: CollabOfficialWebsite): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollabOfficialWebsite>, I>>(base?: I): CollabOfficialWebsite {
    return CollabOfficialWebsite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollabOfficialWebsite>, I>>(object: I): CollabOfficialWebsite {
    const message = createBaseCollabOfficialWebsite();
    message.url = object.url ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseCollabSchedule(): CollabSchedule {
  return { events: [] };
}

export const CollabSchedule: MessageFns<CollabSchedule> = {
  encode(message: CollabSchedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      CollabEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollabSchedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollabSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(CollabEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollabSchedule {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => CollabEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: CollabSchedule): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => CollabEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollabSchedule>, I>>(base?: I): CollabSchedule {
    return CollabSchedule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollabSchedule>, I>>(object: I): CollabSchedule {
    const message = createBaseCollabSchedule();
    message.events = object.events?.map((e) => CollabEvent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCollabImages(): CollabImages {
  return { header: "" };
}

export const CollabImages: MessageFns<CollabImages> = {
  encode(message: CollabImages, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollabImages {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollabImages();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollabImages {
    return { header: isSet(object.header) ? globalThis.String(object.header) : "" };
  },

  toJSON(message: CollabImages): unknown {
    const obj: any = {};
    if (message.header !== "") {
      obj.header = message.header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollabImages>, I>>(base?: I): CollabImages {
    return CollabImages.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollabImages>, I>>(object: I): CollabImages {
    const message = createBaseCollabImages();
    message.header = object.header ?? "";
    return message;
  },
};

function createBaseCollabEvent(): CollabEvent {
  return { location: "", period: "", startDate: "", endDate: "", mapLink: "" };
}

export const CollabEvent: MessageFns<CollabEvent> = {
  encode(message: CollabEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== "") {
      writer.uint32(10).string(message.location);
    }
    if (message.period !== "") {
      writer.uint32(18).string(message.period);
    }
    if (message.startDate !== "") {
      writer.uint32(26).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(34).string(message.endDate);
    }
    if (message.mapLink !== "") {
      writer.uint32(42).string(message.mapLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CollabEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCollabEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.period = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mapLink = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CollabEvent {
    return {
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      period: isSet(object.period) ? globalThis.String(object.period) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "",
      mapLink: isSet(object.mapLink) ? globalThis.String(object.mapLink) : "",
    };
  },

  toJSON(message: CollabEvent): unknown {
    const obj: any = {};
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.period !== "") {
      obj.period = message.period;
    }
    if (message.startDate !== "") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "") {
      obj.endDate = message.endDate;
    }
    if (message.mapLink !== "") {
      obj.mapLink = message.mapLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CollabEvent>, I>>(base?: I): CollabEvent {
    return CollabEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CollabEvent>, I>>(object: I): CollabEvent {
    const message = createBaseCollabEvent();
    message.location = object.location ?? "";
    message.period = object.period ?? "";
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    message.mapLink = object.mapLink ?? "";
    return message;
  },
};

function createBaseGetCollabRequest(): GetCollabRequest {
  return { id: "", language: "" };
}

export const GetCollabRequest: MessageFns<GetCollabRequest> = {
  encode(message: GetCollabRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.language !== "") {
      writer.uint32(18).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCollabRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCollabRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCollabRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: GetCollabRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCollabRequest>, I>>(base?: I): GetCollabRequest {
    return GetCollabRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCollabRequest>, I>>(object: I): GetCollabRequest {
    const message = createBaseGetCollabRequest();
    message.id = object.id ?? "";
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCollabResponse(): GetCollabResponse {
  return { collab: undefined };
}

export const GetCollabResponse: MessageFns<GetCollabResponse> = {
  encode(message: GetCollabResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collab !== undefined) {
      Collab.encode(message.collab, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCollabResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCollabResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collab = Collab.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCollabResponse {
    return { collab: isSet(object.collab) ? Collab.fromJSON(object.collab) : undefined };
  },

  toJSON(message: GetCollabResponse): unknown {
    const obj: any = {};
    if (message.collab !== undefined) {
      obj.collab = Collab.toJSON(message.collab);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCollabResponse>, I>>(base?: I): GetCollabResponse {
    return GetCollabResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCollabResponse>, I>>(object: I): GetCollabResponse {
    const message = createBaseGetCollabResponse();
    message.collab = (object.collab !== undefined && object.collab !== null)
      ? Collab.fromPartial(object.collab)
      : undefined;
    return message;
  },
};

function createBaseListCollabsRequest(): ListCollabsRequest {
  return { language: "" };
}

export const ListCollabsRequest: MessageFns<ListCollabsRequest> = {
  encode(message: ListCollabsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCollabsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCollabsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCollabsRequest {
    return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
  },

  toJSON(message: ListCollabsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCollabsRequest>, I>>(base?: I): ListCollabsRequest {
    return ListCollabsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCollabsRequest>, I>>(object: I): ListCollabsRequest {
    const message = createBaseListCollabsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseListCollabsResponse(): ListCollabsResponse {
  return { collabs: [] };
}

export const ListCollabsResponse: MessageFns<ListCollabsResponse> = {
  encode(message: ListCollabsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.collabs) {
      Collab.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCollabsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCollabsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collabs.push(Collab.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCollabsResponse {
    return {
      collabs: globalThis.Array.isArray(object?.collabs) ? object.collabs.map((e: any) => Collab.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListCollabsResponse): unknown {
    const obj: any = {};
    if (message.collabs?.length) {
      obj.collabs = message.collabs.map((e) => Collab.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCollabsResponse>, I>>(base?: I): ListCollabsResponse {
    return ListCollabsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCollabsResponse>, I>>(object: I): ListCollabsResponse {
    const message = createBaseListCollabsResponse();
    message.collabs = object.collabs?.map((e) => Collab.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSearchCollabsRequest(): SearchCollabsRequest {
  return { query: "", language: "" };
}

export const SearchCollabsRequest: MessageFns<SearchCollabsRequest> = {
  encode(message: SearchCollabsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.language !== "") {
      writer.uint32(18).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCollabsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCollabsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCollabsRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: SearchCollabsRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchCollabsRequest>, I>>(base?: I): SearchCollabsRequest {
    return SearchCollabsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchCollabsRequest>, I>>(object: I): SearchCollabsRequest {
    const message = createBaseSearchCollabsRequest();
    message.query = object.query ?? "";
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseSearchCollabsResponse(): SearchCollabsResponse {
  return { collabs: [] };
}

export const SearchCollabsResponse: MessageFns<SearchCollabsResponse> = {
  encode(message: SearchCollabsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.collabs) {
      Collab.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchCollabsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchCollabsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collabs.push(Collab.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchCollabsResponse {
    return {
      collabs: globalThis.Array.isArray(object?.collabs) ? object.collabs.map((e: any) => Collab.fromJSON(e)) : [],
    };
  },

  toJSON(message: SearchCollabsResponse): unknown {
    const obj: any = {};
    if (message.collabs?.length) {
      obj.collabs = message.collabs.map((e) => Collab.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchCollabsResponse>, I>>(base?: I): SearchCollabsResponse {
    return SearchCollabsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchCollabsResponse>, I>>(object: I): SearchCollabsResponse {
    const message = createBaseSearchCollabsResponse();
    message.collabs = object.collabs?.map((e) => Collab.fromPartial(e)) || [];
    return message;
  },
};

function createBaseScanSourcesRequest(): ScanSourcesRequest {
  return {};
}

export const ScanSourcesRequest: MessageFns<ScanSourcesRequest> = {
  encode(_: ScanSourcesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScanSourcesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScanSourcesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ScanSourcesRequest {
    return {};
  },

  toJSON(_: ScanSourcesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ScanSourcesRequest>, I>>(base?: I): ScanSourcesRequest {
    return ScanSourcesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScanSourcesRequest>, I>>(_: I): ScanSourcesRequest {
    const message = createBaseScanSourcesRequest();
    return message;
  },
};

function createBaseScanSourcesResponse(): ScanSourcesResponse {
  return { numNewCollabs: 0 };
}

export const ScanSourcesResponse: MessageFns<ScanSourcesResponse> = {
  encode(message: ScanSourcesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numNewCollabs !== 0) {
      writer.uint32(8).int64(message.numNewCollabs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScanSourcesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScanSourcesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numNewCollabs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScanSourcesResponse {
    return { numNewCollabs: isSet(object.numNewCollabs) ? globalThis.Number(object.numNewCollabs) : 0 };
  },

  toJSON(message: ScanSourcesResponse): unknown {
    const obj: any = {};
    if (message.numNewCollabs !== 0) {
      obj.numNewCollabs = Math.round(message.numNewCollabs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScanSourcesResponse>, I>>(base?: I): ScanSourcesResponse {
    return ScanSourcesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScanSourcesResponse>, I>>(object: I): ScanSourcesResponse {
    const message = createBaseScanSourcesResponse();
    message.numNewCollabs = object.numNewCollabs ?? 0;
    return message;
  },
};

export interface CollabCafeService {
  GetCollab(request: GetCollabRequest): Promise<GetCollabResponse>;
  ListCollabs(request: ListCollabsRequest): Promise<ListCollabsResponse>;
  SearchCollabs(request: SearchCollabsRequest): Promise<SearchCollabsResponse>;
  ScanSources(request: ScanSourcesRequest): Promise<ScanSourcesResponse>;
}

export const CollabCafeServiceServiceName = "collabcafe.CollabCafeService";
export class CollabCafeServiceClientImpl implements CollabCafeService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CollabCafeServiceServiceName;
    this.rpc = rpc;
    this.GetCollab = this.GetCollab.bind(this);
    this.ListCollabs = this.ListCollabs.bind(this);
    this.SearchCollabs = this.SearchCollabs.bind(this);
    this.ScanSources = this.ScanSources.bind(this);
  }
  GetCollab(request: GetCollabRequest): Promise<GetCollabResponse> {
    const data = GetCollabRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCollab", data);
    return promise.then((data) => GetCollabResponse.decode(new BinaryReader(data)));
  }

  ListCollabs(request: ListCollabsRequest): Promise<ListCollabsResponse> {
    const data = ListCollabsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListCollabs", data);
    return promise.then((data) => ListCollabsResponse.decode(new BinaryReader(data)));
  }

  SearchCollabs(request: SearchCollabsRequest): Promise<SearchCollabsResponse> {
    const data = SearchCollabsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SearchCollabs", data);
    return promise.then((data) => SearchCollabsResponse.decode(new BinaryReader(data)));
  }

  ScanSources(request: ScanSourcesRequest): Promise<ScanSourcesResponse> {
    const data = ScanSourcesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ScanSources", data);
    return promise.then((data) => ScanSourcesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
