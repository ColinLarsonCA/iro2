// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: collabcafe.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollabCafeServiceClient is the client API for CollabCafeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollabCafeServiceClient interface {
	GetCollab(ctx context.Context, in *GetCollabRequest, opts ...grpc.CallOption) (*GetCollabResponse, error)
	ListCollabs(ctx context.Context, in *ListCollabsRequest, opts ...grpc.CallOption) (*ListCollabsResponse, error)
	SearchCollabs(ctx context.Context, in *SearchCollabsRequest, opts ...grpc.CallOption) (*SearchCollabsResponse, error)
	ScanSources(ctx context.Context, in *ScanSourcesRequest, opts ...grpc.CallOption) (*ScanSourcesResponse, error)
}

type collabCafeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollabCafeServiceClient(cc grpc.ClientConnInterface) CollabCafeServiceClient {
	return &collabCafeServiceClient{cc}
}

func (c *collabCafeServiceClient) GetCollab(ctx context.Context, in *GetCollabRequest, opts ...grpc.CallOption) (*GetCollabResponse, error) {
	out := new(GetCollabResponse)
	err := c.cc.Invoke(ctx, "/collabcafe.CollabCafeService/GetCollab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabCafeServiceClient) ListCollabs(ctx context.Context, in *ListCollabsRequest, opts ...grpc.CallOption) (*ListCollabsResponse, error) {
	out := new(ListCollabsResponse)
	err := c.cc.Invoke(ctx, "/collabcafe.CollabCafeService/ListCollabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabCafeServiceClient) SearchCollabs(ctx context.Context, in *SearchCollabsRequest, opts ...grpc.CallOption) (*SearchCollabsResponse, error) {
	out := new(SearchCollabsResponse)
	err := c.cc.Invoke(ctx, "/collabcafe.CollabCafeService/SearchCollabs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collabCafeServiceClient) ScanSources(ctx context.Context, in *ScanSourcesRequest, opts ...grpc.CallOption) (*ScanSourcesResponse, error) {
	out := new(ScanSourcesResponse)
	err := c.cc.Invoke(ctx, "/collabcafe.CollabCafeService/ScanSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollabCafeServiceServer is the server API for CollabCafeService service.
// All implementations must embed UnimplementedCollabCafeServiceServer
// for forward compatibility
type CollabCafeServiceServer interface {
	GetCollab(context.Context, *GetCollabRequest) (*GetCollabResponse, error)
	ListCollabs(context.Context, *ListCollabsRequest) (*ListCollabsResponse, error)
	SearchCollabs(context.Context, *SearchCollabsRequest) (*SearchCollabsResponse, error)
	ScanSources(context.Context, *ScanSourcesRequest) (*ScanSourcesResponse, error)
	mustEmbedUnimplementedCollabCafeServiceServer()
}

// UnimplementedCollabCafeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollabCafeServiceServer struct {
}

func (UnimplementedCollabCafeServiceServer) GetCollab(context.Context, *GetCollabRequest) (*GetCollabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollab not implemented")
}
func (UnimplementedCollabCafeServiceServer) ListCollabs(context.Context, *ListCollabsRequest) (*ListCollabsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollabs not implemented")
}
func (UnimplementedCollabCafeServiceServer) SearchCollabs(context.Context, *SearchCollabsRequest) (*SearchCollabsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCollabs not implemented")
}
func (UnimplementedCollabCafeServiceServer) ScanSources(context.Context, *ScanSourcesRequest) (*ScanSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanSources not implemented")
}
func (UnimplementedCollabCafeServiceServer) mustEmbedUnimplementedCollabCafeServiceServer() {}

// UnsafeCollabCafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollabCafeServiceServer will
// result in compilation errors.
type UnsafeCollabCafeServiceServer interface {
	mustEmbedUnimplementedCollabCafeServiceServer()
}

func RegisterCollabCafeServiceServer(s grpc.ServiceRegistrar, srv CollabCafeServiceServer) {
	s.RegisterService(&CollabCafeService_ServiceDesc, srv)
}

func _CollabCafeService_GetCollab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollabRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabCafeServiceServer).GetCollab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabcafe.CollabCafeService/GetCollab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabCafeServiceServer).GetCollab(ctx, req.(*GetCollabRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabCafeService_ListCollabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabCafeServiceServer).ListCollabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabcafe.CollabCafeService/ListCollabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabCafeServiceServer).ListCollabs(ctx, req.(*ListCollabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabCafeService_SearchCollabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCollabsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabCafeServiceServer).SearchCollabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabcafe.CollabCafeService/SearchCollabs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabCafeServiceServer).SearchCollabs(ctx, req.(*SearchCollabsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollabCafeService_ScanSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollabCafeServiceServer).ScanSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collabcafe.CollabCafeService/ScanSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollabCafeServiceServer).ScanSources(ctx, req.(*ScanSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollabCafeService_ServiceDesc is the grpc.ServiceDesc for CollabCafeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollabCafeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collabcafe.CollabCafeService",
	HandlerType: (*CollabCafeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollab",
			Handler:    _CollabCafeService_GetCollab_Handler,
		},
		{
			MethodName: "ListCollabs",
			Handler:    _CollabCafeService_ListCollabs_Handler,
		},
		{
			MethodName: "SearchCollabs",
			Handler:    _CollabCafeService_SearchCollabs_Handler,
		},
		{
			MethodName: "ScanSources",
			Handler:    _CollabCafeService_ScanSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collabcafe.proto",
}
