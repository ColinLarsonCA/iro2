// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: collabcafe.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Collab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Slug       string         `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	PostedDate string         `protobuf:"bytes,4,opt,name=posted_date,json=postedDate,proto3" json:"posted_date,omitempty"`
	Summary    *CollabSummary `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Content    *CollabContent `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Images     *CollabImages  `protobuf:"bytes,7,opt,name=images,proto3" json:"images,omitempty"`
}

func (x *Collab) Reset() {
	*x = Collab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collab) ProtoMessage() {}

func (x *Collab) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collab.ProtoReflect.Descriptor instead.
func (*Collab) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{0}
}

func (x *Collab) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collab) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Collab) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Collab) GetPostedDate() string {
	if x != nil {
		return x.PostedDate
	}
	return ""
}

func (x *Collab) GetSummary() *CollabSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *Collab) GetContent() *CollabContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Collab) GetImages() *CollabImages {
	if x != nil {
		return x.Images
	}
	return nil
}

type CollabSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbnail   string `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CollabSummary) Reset() {
	*x = CollabSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabSummary) ProtoMessage() {}

func (x *CollabSummary) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabSummary.ProtoReflect.Descriptor instead.
func (*CollabSummary) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{1}
}

func (x *CollabSummary) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *CollabSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CollabSummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CollabContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series          string                 `protobuf:"bytes,1,opt,name=series,proto3" json:"series,omitempty"`
	Title           string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Categories      []string               `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
	Tags            []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	OfficialWebsite *CollabOfficialWebsite `protobuf:"bytes,5,opt,name=official_website,json=officialWebsite,proto3" json:"official_website,omitempty"`
	Schedule        *CollabSchedule        `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *CollabContent) Reset() {
	*x = CollabContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabContent) ProtoMessage() {}

func (x *CollabContent) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabContent.ProtoReflect.Descriptor instead.
func (*CollabContent) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{2}
}

func (x *CollabContent) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *CollabContent) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CollabContent) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CollabContent) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CollabContent) GetOfficialWebsite() *CollabOfficialWebsite {
	if x != nil {
		return x.OfficialWebsite
	}
	return nil
}

func (x *CollabContent) GetSchedule() *CollabSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type CollabOfficialWebsite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CollabOfficialWebsite) Reset() {
	*x = CollabOfficialWebsite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabOfficialWebsite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabOfficialWebsite) ProtoMessage() {}

func (x *CollabOfficialWebsite) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabOfficialWebsite.ProtoReflect.Descriptor instead.
func (*CollabOfficialWebsite) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{3}
}

func (x *CollabOfficialWebsite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CollabOfficialWebsite) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CollabSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*CollabEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CollabSchedule) Reset() {
	*x = CollabSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabSchedule) ProtoMessage() {}

func (x *CollabSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabSchedule.ProtoReflect.Descriptor instead.
func (*CollabSchedule) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{4}
}

func (x *CollabSchedule) GetEvents() []*CollabEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type CollabImages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *CollabImages) Reset() {
	*x = CollabImages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabImages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabImages) ProtoMessage() {}

func (x *CollabImages) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabImages.ProtoReflect.Descriptor instead.
func (*CollabImages) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{5}
}

func (x *CollabImages) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

type CollabEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location  string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Period    string `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	StartDate string `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	MapLink   string `protobuf:"bytes,5,opt,name=map_link,json=mapLink,proto3" json:"map_link,omitempty"`
}

func (x *CollabEvent) Reset() {
	*x = CollabEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollabEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollabEvent) ProtoMessage() {}

func (x *CollabEvent) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollabEvent.ProtoReflect.Descriptor instead.
func (*CollabEvent) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{6}
}

func (x *CollabEvent) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CollabEvent) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *CollabEvent) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CollabEvent) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CollabEvent) GetMapLink() string {
	if x != nil {
		return x.MapLink
	}
	return ""
}

type GetCollabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetCollabRequest) Reset() {
	*x = GetCollabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollabRequest) ProtoMessage() {}

func (x *GetCollabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollabRequest.ProtoReflect.Descriptor instead.
func (*GetCollabRequest) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{7}
}

func (x *GetCollabRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCollabRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetCollabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collab *Collab `protobuf:"bytes,1,opt,name=collab,proto3" json:"collab,omitempty"`
}

func (x *GetCollabResponse) Reset() {
	*x = GetCollabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollabResponse) ProtoMessage() {}

func (x *GetCollabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollabResponse.ProtoReflect.Descriptor instead.
func (*GetCollabResponse) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{8}
}

func (x *GetCollabResponse) GetCollab() *Collab {
	if x != nil {
		return x.Collab
	}
	return nil
}

type ListCollabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *ListCollabsRequest) Reset() {
	*x = ListCollabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollabsRequest) ProtoMessage() {}

func (x *ListCollabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollabsRequest.ProtoReflect.Descriptor instead.
func (*ListCollabsRequest) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{9}
}

func (x *ListCollabsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ListCollabsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collabs []*Collab `protobuf:"bytes,1,rep,name=collabs,proto3" json:"collabs,omitempty"`
}

func (x *ListCollabsResponse) Reset() {
	*x = ListCollabsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollabsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollabsResponse) ProtoMessage() {}

func (x *ListCollabsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollabsResponse.ProtoReflect.Descriptor instead.
func (*ListCollabsResponse) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{10}
}

func (x *ListCollabsResponse) GetCollabs() []*Collab {
	if x != nil {
		return x.Collabs
	}
	return nil
}

type SearchCollabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *SearchCollabsRequest) Reset() {
	*x = SearchCollabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCollabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCollabsRequest) ProtoMessage() {}

func (x *SearchCollabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCollabsRequest.ProtoReflect.Descriptor instead.
func (*SearchCollabsRequest) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{11}
}

func (x *SearchCollabsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchCollabsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SearchCollabsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collabs []*Collab `protobuf:"bytes,1,rep,name=collabs,proto3" json:"collabs,omitempty"`
}

func (x *SearchCollabsResponse) Reset() {
	*x = SearchCollabsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCollabsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCollabsResponse) ProtoMessage() {}

func (x *SearchCollabsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCollabsResponse.ProtoReflect.Descriptor instead.
func (*SearchCollabsResponse) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{12}
}

func (x *SearchCollabsResponse) GetCollabs() []*Collab {
	if x != nil {
		return x.Collabs
	}
	return nil
}

type ScanSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScanSourcesRequest) Reset() {
	*x = ScanSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanSourcesRequest) ProtoMessage() {}

func (x *ScanSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanSourcesRequest.ProtoReflect.Descriptor instead.
func (*ScanSourcesRequest) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{13}
}

type ScanSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumNewCollabs int64 `protobuf:"varint,1,opt,name=num_new_collabs,json=numNewCollabs,proto3" json:"num_new_collabs,omitempty"`
}

func (x *ScanSourcesResponse) Reset() {
	*x = ScanSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_collabcafe_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanSourcesResponse) ProtoMessage() {}

func (x *ScanSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_collabcafe_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanSourcesResponse.ProtoReflect.Descriptor instead.
func (*ScanSourcesResponse) Descriptor() ([]byte, []int) {
	return file_collabcafe_proto_rawDescGZIP(), []int{14}
}

func (x *ScanSourcesResponse) GetNumNewCollabs() int64 {
	if x != nil {
		return x.NumNewCollabs
	}
	return 0
}

var File_collabcafe_proto protoreflect.FileDescriptor

var file_collabcafe_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x22, 0xfd,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x65,
	0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x57,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22,
	0x3d, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x41,
	0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x26, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x22, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52, 0x06, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x22, 0x30, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x22, 0x48, 0x0a, 0x14, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x3d, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73,
	0x32, 0xd3, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x43, 0x61, 0x66, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x12,
	0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61, 0x66, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61,
	0x66, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x63, 0x61,
	0x66, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_collabcafe_proto_rawDescOnce sync.Once
	file_collabcafe_proto_rawDescData = file_collabcafe_proto_rawDesc
)

func file_collabcafe_proto_rawDescGZIP() []byte {
	file_collabcafe_proto_rawDescOnce.Do(func() {
		file_collabcafe_proto_rawDescData = protoimpl.X.CompressGZIP(file_collabcafe_proto_rawDescData)
	})
	return file_collabcafe_proto_rawDescData
}

var file_collabcafe_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_collabcafe_proto_goTypes = []interface{}{
	(*Collab)(nil),                // 0: collabcafe.Collab
	(*CollabSummary)(nil),         // 1: collabcafe.CollabSummary
	(*CollabContent)(nil),         // 2: collabcafe.CollabContent
	(*CollabOfficialWebsite)(nil), // 3: collabcafe.CollabOfficialWebsite
	(*CollabSchedule)(nil),        // 4: collabcafe.CollabSchedule
	(*CollabImages)(nil),          // 5: collabcafe.CollabImages
	(*CollabEvent)(nil),           // 6: collabcafe.CollabEvent
	(*GetCollabRequest)(nil),      // 7: collabcafe.GetCollabRequest
	(*GetCollabResponse)(nil),     // 8: collabcafe.GetCollabResponse
	(*ListCollabsRequest)(nil),    // 9: collabcafe.ListCollabsRequest
	(*ListCollabsResponse)(nil),   // 10: collabcafe.ListCollabsResponse
	(*SearchCollabsRequest)(nil),  // 11: collabcafe.SearchCollabsRequest
	(*SearchCollabsResponse)(nil), // 12: collabcafe.SearchCollabsResponse
	(*ScanSourcesRequest)(nil),    // 13: collabcafe.ScanSourcesRequest
	(*ScanSourcesResponse)(nil),   // 14: collabcafe.ScanSourcesResponse
}
var file_collabcafe_proto_depIdxs = []int32{
	1,  // 0: collabcafe.Collab.summary:type_name -> collabcafe.CollabSummary
	2,  // 1: collabcafe.Collab.content:type_name -> collabcafe.CollabContent
	5,  // 2: collabcafe.Collab.images:type_name -> collabcafe.CollabImages
	3,  // 3: collabcafe.CollabContent.official_website:type_name -> collabcafe.CollabOfficialWebsite
	4,  // 4: collabcafe.CollabContent.schedule:type_name -> collabcafe.CollabSchedule
	6,  // 5: collabcafe.CollabSchedule.events:type_name -> collabcafe.CollabEvent
	0,  // 6: collabcafe.GetCollabResponse.collab:type_name -> collabcafe.Collab
	0,  // 7: collabcafe.ListCollabsResponse.collabs:type_name -> collabcafe.Collab
	0,  // 8: collabcafe.SearchCollabsResponse.collabs:type_name -> collabcafe.Collab
	7,  // 9: collabcafe.CollabCafeService.GetCollab:input_type -> collabcafe.GetCollabRequest
	9,  // 10: collabcafe.CollabCafeService.ListCollabs:input_type -> collabcafe.ListCollabsRequest
	11, // 11: collabcafe.CollabCafeService.SearchCollabs:input_type -> collabcafe.SearchCollabsRequest
	13, // 12: collabcafe.CollabCafeService.ScanSources:input_type -> collabcafe.ScanSourcesRequest
	8,  // 13: collabcafe.CollabCafeService.GetCollab:output_type -> collabcafe.GetCollabResponse
	10, // 14: collabcafe.CollabCafeService.ListCollabs:output_type -> collabcafe.ListCollabsResponse
	12, // 15: collabcafe.CollabCafeService.SearchCollabs:output_type -> collabcafe.SearchCollabsResponse
	14, // 16: collabcafe.CollabCafeService.ScanSources:output_type -> collabcafe.ScanSourcesResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_collabcafe_proto_init() }
func file_collabcafe_proto_init() {
	if File_collabcafe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_collabcafe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabOfficialWebsite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabImages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollabEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollabsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCollabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCollabsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_collabcafe_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_collabcafe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_collabcafe_proto_goTypes,
		DependencyIndexes: file_collabcafe_proto_depIdxs,
		MessageInfos:      file_collabcafe_proto_msgTypes,
	}.Build()
	File_collabcafe_proto = out.File
	file_collabcafe_proto_rawDesc = nil
	file_collabcafe_proto_goTypes = nil
	file_collabcafe_proto_depIdxs = nil
}
